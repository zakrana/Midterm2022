Please answer the below Data Structure Questions:

why do we need data structure?
A.Data structures are used in computing to make it easy to locate and retrieve information. Non-primitive data structures
  provide ways of storing multiple values in a single variable. These include arrays, lists, stacks, trees, and so forth.
  Data structures can also be used to group and organize other data structures. It also allows to manage large amount of
  data such as large databases and indexing services such as Hash table.

What are the various operations that can be performed on different Data Structures?
A. 1- Insertion: adding new record to Data structure;
   2- Deletion: Removing particular record from the data structure.
   3- Searching: Finding the location of the record in data structure.
   4- Sorting: Arranging records in a specific order.
   5- Merging: Combining the records from different data structures to single data structure.
   6- Traversing:Accessing and processing records...

List out the areas in which data structures are applied extensively?
1- Compiler Design.
2- Operating System.
3- Database Management System
4- Statistical analysis package
5- Numerical Analysis.
6- Graphics.
7- Artificial Intelligence

what is an Array?
A. An array is a non primitive variable  Data Structure containing a number of a same data type elements. it is used
to store multiple values in a single variable, instead of declaring separate variables for each value.

what is the difference between the Array and ArrayList?
A. 1- The  array is static and has to be predefined, arrayList is dynamic  grow dynamically based on need.
   2- ArrayList can contain primitive and non primitive data type but array contain only non primitive data type.
   3- Array element's can be accessed  by using an index [], ArrayList has a set of methods to access its elements.

what is LinkedList?
A. Linked List are linear data structures where the elements are defined in nodes with address and pointers.
 The elements can be simply or doubly linked.

How is an Array different from Linked List?
A. - An array is a collection of elements defined in block with index only, A linked list is a collection of objects
 known as a nodes where node consists of two parts, i.e., data and address.
   - Array elements store in a contiguous memory location.Linked list elements can be stored anywhere in the memory or
   randomly stored.
   - Array works with a static memory. The Linked list works with dynamic memory.
   - Array elements are independent of each other.Linked list elements are dependent on each other.
   - Array takes more time while performing any operation like insertion, deletion, etc. Linked list takes less time while
   performing any operation like insertion, deletion, etc.

   what is queue?
   A. Queue represents a linear data structure designed to have elements inserted at the end of the queue(it follows FIFO order),
   and elements removed from the beginning of the queue(last element added).

   what is stack?
   A. Stack is a linear data structure which follows a particular order in which the operations are performed.
   The order may be LIFO(Last In First Out) or FILO(First In Last Out).


   what is FIFO and LIFO?
  A.  FIFO: Stands for "First In First Out", it is a method in which items are processed  in the order they have been entered.
   Certain data structures like Queue and other variants of Queue uses FIFO approach for processing data.
   LIFO: Stands for "Last In First Out", it is a method for handling data structures where the first element is processed last
   and the last element is processed first. In Stack elements can be accessed on the basis of LIFO.

what is the order of complexity?
A. Order of complexity is a measure of how long an algorithm would take to complete given an input of size n.
Assuming the input  of size N, we can say that the algorithm will finish at O(N), O(N^2), O(N^3), O(N*log(N)) etc.
This means that it is a certain mathematical expression of the size of the input, and the algorithm finishes between
two factors of it. Generally, the smaller the order of complexity of the program's underlying algorithm, the faster
it will run and the better it will scale as the input gets larger. Thus, we should often seek more efficient
algorithms in order to reduce the order of complexity.



what is the best case to search an element from an array?
A. Sequential search (using map) is the best that we can do when trying to find a value in an unsorted array. But if the array is
sorted in increasing order by value, then we can do much better. We use a process called binary search.

what is the worst case to search an element from an array?
For an unsorted array, we have to search element by element, until the element is found or array is completely
traversed. Element can be at 1st position, the last position or somewhere in between. The worst case arises when
the element is at last position or not in the array, therefore we have to traverse the whole array giving n no.
of repetitions over loop. Therefore the worst case time complexity is O(n).

what is tree in data structure?
A. Tree is a nonlinear data structure, compared to arrays, linked lists, stacks and queues which are linear data structures.
   A tree can be empty with no nodes or a tree is a structure consisting of one node called the root and zero or one or more
   subtrees. A tree has following general properties:
   One node is distinguished as a root;
   Every node (exclude a root) is connected by a directed edge from exactly one other node; A direction is: parent -> children

what is graph in data structure?
A. A Graph is a non-linear data structure consisting of nodes and edges. The nodes are sometimes also referred to as vertices
   and the edges are lines or arcs that connect any two nodes in the graph. Graphs are used to solve many real-life problems.
   Graphs are used to represent networks. The networks may include paths in a city or telephone network or circuit network.
   Graphs are also used in social networks like linkedIn, Facebook. For example, in Facebook, each person is represented with
   a vertex(or node). Each node is a structure and contains information like person id, name, gender, locale etc.

what is the difference between the HashTable and HashMap?
A. HashTable is synchronized, HashMap is not. Therefore it makes HashMap efficient with non-threaded applications
   because un-synchronized objects perform better than synchronized objects. HashTable does not allow null keys or values,
   where HashMap does allow one null key and unlimited null values.


What are the major data structures used in the following areas : RDBMS, Network data model and Hierarchical data model.
A. RDBMS : Arrays.
   Network data model : Graph.
   Hierarchical data model : Tree.

How HashMap works in java?
A. HashMap implements MAP interface it works on the principle of Hashing. Objects are stored by calling put(key, value)
method of HashMap and retrieved by calling get(key) method. When we call put method, the hashcode() method of the key
object is called so that the hash function of the map can find a bucket location to store value object, which is actually
an index of the internal array, known as the table.


What is ArrayIndexOutOfBoundsException in java? When it occurs?
A. It is an Exception that we need to handle. it is thrown to indicate that we are trying to access array element with an
illegal index. This exception is thrown when the index is either negative or greater than or equal to the size of the array.


What are the different ways of copying an array into another array?
1- Create a new array of the same length as the original array and copy each element(with the help of for loop).
2- Use the clone method of the array. Clone methods create a new array of the same size.
int [] b=a.clone(); where a is the original array.
3- Use System.arraycopy() method.It is another method that directly copies one array to another. It has following syntax:
System.arraycopy(a,0,b,0,a.length);
4- We can directly copy one array to another by using Arrays.copyOf() method. It has following syntax.
b=Arrays.copyOf(a,a.length);

What is difference between an array and a linked list?
A. A. - An array is a collection of elements defined in block with index only, A linked list is a collection of objects
    known as a nodes where node consists of two parts, i.e., data and address.
      - Array elements store in a contiguous memory location.Linked list elements can be stored anywhere in the memory or
      randomly stored.
      - Array works with a static memory. The Linked list works with dynamic memory.
      - Array elements are independent of each other.Linked list elements are dependent on each other.
      - Array takes more time while performing any operation like insertion, deletion, etc. Linked list takes less time while
      performing any operation like insertion, deletion, etc.

 What is DFS and BFS?
A. - DFS stands for Depth First Search is a edge based technique. It uses the Stack data structure, performs two stages, first
 visited vertices are pushed into stack and second if there is no vertices then visited vertices are popped.
 - BFS stands for Breadth First Search is a vertex based technique for finding a shortest path in graph. It uses a Queue
  data structure which follows first in first out

What is Recursion?
 A. Recursion is the technique of making a method call itself. This technique provides a way to break complicated problems
 down into simple problems which are easier to solve.


 What are linear and non linear data Structures?
 A. - Linear Data Structures: The data structure where data elements are organized sequentially or linearly and they are
 attached one after another(Single level is involved). Example: Arrays,ArrayList, Stack, Queue and Linked List.
 - Non Linear Data Structures: The data structure where data elements are not organized sequentially( single level is
 not involved). Example: Trees and Graphs.


 What is Big-(O)-notation?
A. Big O notation is used in Computer Science to describe the performance or complexity of an algorithm. Big O specifically
 describes the worst-case scenario, and can be used to describe the execution time required (how long an algorithm will
 take to run) or the space used (e.g. in memory or on disk) by an algorithm.


 Outlined different kind of sorting algorithm with time complexity?
 A. 1- Bubble sort: It is a comparison algorithm. It works by repeatedly stepping through the list to be sorted, comparing each
      pair of adjacent items and swapping them if they are in the wrong order. The pass through the list is repeated until no
      swaps are needed, which indicates that the list is sorted.
      Worst case performance: O(n2)
      Best case performance: O(n)
      Average case performance: O(n2)
      Worst case space complexity: O(n) total, O(1) auxiliary
      Bubble sort is not a practical sorting algorithm when n is large.

      2.Selection sort: It is an in-place comparison sort.Selection sort is noted for its simplicity, and also has performance
      advantages over more complicated algorithms in certain situations.
      Worst case performance: O(n2)
      Best case performance: O(n2)
      Average case performance: O(n2)
      Worst case space complexity: O(n) total, O(1) auxiliary

      3.Insertion sort: It is a comparison sort in which the sorted array (or list) is built one entry at a time. It is much
      less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort.
      Worst case performance: O(n2)
      Best case performance: O(n)
      Average case performance: O(n2)
      Worst case space complexity: O(n) total, O(1) auxiliary

      4. Merge sort: It is an O(n log n) comparison-based sorting algorithm.
      Worst case performance: O(n log n)
      Best case performance: O(n log n) typical
      Average case performance: O(n log n)
      Worst case space complexity: O(n) total, O(n) auxiliary

      5.Quick sort: It is similar to merge sort in many ways. It divides the elements to be sorted into two groups, sorts the
      two groups by recursive calls, and combines the two sorted groups into a single array of sorted values.
      The choice of a good pivot element is critical to the efficiency of the quicksort algorithm.
      If we can ensure that the pivot element is near the median of the array values, then quicksort is very efficient.
      Worst case performance: O(n2)
      Best case performance: O(n log n)
      Average case performance: O(n log n)


      Draw a table with time complexity in which it will summarize all the data structure feature's advantages and disadvantages.
        a)In terms of Accessing element.
        b)In terms of Inserting element.
        c)In terms of Searching element.
        d)In terms of Removing element.
      ++-----------------++----------++------------++------------++-----------++
      ||Datastructures   ||Accessing || Insertion  || Searching  || Removing  ||
      ___________________||__________||____________||____________||___________++
      ||Array            || 0(1)     || 0(n)       || 0(n)       || 0(n)      ||
      ||Stack            || 0(n)     || 0(1)       || 0(n)       || 0(1)      ||
      ||Queue            || 0(n)     || 0(1        || 0(n)       || 0(1)      ||
      ||Singly-Linkedlist|| 0(n)     || 0(1)       || 0(n)       || 0(1)      ||
      ||doubly-Linkedlist|| 0(n)     || 0(1)       || 0(n)       || 0(1)      ||
      ||HashTable        || N/A      || 0(1)       || 0(1)       || 0(1)      ||
      ||BinaryTree       || 0(log(n))|| 0(log(n))  || 0(log(n))  || 0(log(n)) ||
      ++-----------------++----------++------------++------------++-----------++